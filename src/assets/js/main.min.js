'use strict';

(function () {

    'use strict';

    angular.module('controlpanel', ['ngRoute', 'ui.router', 'ui.router.state.events', 'ngDialog', 'LocalStorageModule', 'controlpanel.core', 'controlpanel.home', 'controlpanel.login', 'controlpanel.user', 'controlpanel.item', 'controlpanel.error', 'controlpanel.settings']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').controller('controlpanelController', controlpanelController);

    controlpanelController.$inject = ['CoreAuthService'];

    function controlpanelController(CoreAuthService) {
        var vm = this;
        vm.isLogged = CoreAuthService.isLoggedIn;
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').config(ConfigProvider).config(ConfigLocalStorage).run(["$rootScope", "$state", "CoreAuthService", run]);

    ConfigProvider.$inject = ['$urlRouterProvider'];

    function ConfigProvider($urlRouterProvider) {
        $urlRouterProvider.otherwise('/login');
    }

    ConfigLocalStorage.$inject = ['localStorageServiceProvider'];

    function ConfigLocalStorage(localStorageServiceProvider) {
        localStorageServiceProvider.setPrefix('controlpanel');
    }

    function run($rootScope, $state, CoreAuthService) {
        $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
            if (toState.error) {
                return;
            }

            if (toState.url == '/access-denied' && !toParams.route) {
                event.preventDefault();
                $state.go(fromState.name);
            }

            if (!CoreAuthService.isLoggedIn() && toState.url != '/login') {
                event.preventDefault();
                $state.go("login");
            }

            if (CoreAuthService.isLoggedIn() && toState.url == '/login') {
                event.preventDefault();
                $state.go("home");
            }
            if (toState.role && !CoreAuthService.hasRole(toState.role)) {
                event.preventDefault();
                $state.go("access-denied", { route: toState.name });
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.error', []);
})();
'use strict';

(function () {

    angular.module('controlpanel.home', []);

    angular.module('controlpanel.home').config(homeConfig);

    homeConfig.$inject = ['$stateProvider'];
    function homeConfig($stateProvider) {
        $stateProvider.state('home', {
            url: '/home',
            views: {
                'menu': {
                    template: '<menu></menu>'
                },
                'body': {
                    templateUrl: 'modules/home/home.html',
                    controller: 'homeController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.home').controller('homeController', homeController);

    homeController.$inject = ['DataFactory', 'CoreItemService', 'CoreUserService', 'CoreAuthService'];

    function homeController(DataFactory, CoreItemService, CoreUserService, CoreAuthService) {
        //vars
        var vm = this;
        vm.data = DataFactory;
        vm.userLogged = CoreAuthService.getTokenData();
        var init = function init() {
            vm.data.menuItemActive = 'home';
            CoreItemService.lastInserts().then(function (data) {
                vm.listItems = data;
                CoreItemService.totItems().then(function (count) {
                    return vm.countItem = count.count;
                });
            });
            CoreUserService.lastInserts().then(function (data) {
                vm.listUsers = data;
                CoreUserService.totUsers().then(function (count) {
                    return vm.countUser = count.count;
                });
            });
        };

        init();
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.home').service('homeService', homeService);

    homeService.$inject = [];

    function homeService() {}
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.item', []).config(itemConfig);

    itemConfig.$inject = ['$stateProvider'];
    function itemConfig($stateProvider) {
        $stateProvider.state('item', {
            url: '/item',
            views: {
                'menu': {
                    template: '<menu></menu>'
                },
                'body': {
                    templateUrl: 'modules/item/item.html',
                    controller: 'itemController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.item').controller('itemController', itemController);

    itemController.$inject = ['DataFactory', 'ngDialog', 'CoreItemService', '$scope', 'DialogFactory', '$state'];

    function itemController(DataFactory, ngDialog, CoreItemService, $scope, DialogFactory, $state) {
        //vars
        var vm = this;
        vm.data = DataFactory;
        vm.filterItem = { name: '', status: '' };

        var init = function init() {
            vm.data.menuItemActive = 'item';
            CoreItemService.getListItem(vm.filterItem).then(function (data) {
                if (data === 'server undefined') {
                    $state.go('server-undefined');
                    return;
                }
                vm.listItens = data;
            });
        };

        init();

        vm.newItem = function () {
            var newItem = ngDialog.open({
                templateUrl: 'modules/item/itemModal.html',
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false,
                controller: 'itemModelController',
                controllerAs: 'vm'
            });

            newItem.closePromise.then(function (data) {
                if (!data.value) return;
                DialogFactory.openDialog(data.value.message);
                vm.listItens.push(data.value.item);
            });
        };

        vm.editItem = function (item) {
            var editItem = ngDialog.open({
                templateUrl: 'modules/item/itemModal.html',
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false,
                controller: 'itemModelController',
                controllerAs: 'vm',
                data: {
                    item: item
                }
            });

            editItem.closePromise.then(function (data) {
                if (!data.value) return;

                if (typeof data.value === 'string') {
                    DialogFactory.openDialog(data.value);
                    return;
                }
                DialogFactory.openDialog(data.value.message);
                var count = 0;
                vm.listItens.find(function (itemEdited) {
                    count++;return itemEdited._id === data.value.item._id;
                });
                vm.listItens.splice(count - 1, 1, data.value.item);
            });
        };

        vm.deleteItem = function (item) {
            DialogFactory.openDialogConfirm('Deseja deletar ' + item.name + ' ?').then(function (data) {
                if (data) {
                    CoreItemService.deleteItem(item._id).then(function (data) {
                        if (data === 'server undefined') {
                            $state.go('server-undefined');
                            return;
                        }
                        DialogFactory.openDialog(data.message);
                        var count = 0;
                        vm.listItens.find(function (itemDeleted) {
                            count++;return itemDeleted._id === item._id;
                        });
                        vm.listItens.splice(count - 1, 1);
                    });
                }
            });
        };

        vm.search = function () {
            CoreItemService.getListItem(vm.filterItem).then(function (data) {
                if (data === 'server undefined') {
                    $state.go('server-undefined');
                    return;
                }
                vm.listItens = data;
            });
        };
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.item').service('itemService', itemService);

    itemService.$inject = [];

    function itemService() {}
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.item').controller('itemModelController', itemModelController);

    itemModelController.$inject = ['CoreItemService', 'CoreAuthService', '$scope', '$state'];

    function itemModelController(CoreItemService, CoreAuthService, $scope, $state) {
        //vars
        var vm = this;
        var userLogged = CoreAuthService.getTokenData();
        var init = function init() {
            vm.item = $scope.ngDialogData ? angular.copy($scope.ngDialogData.item) : {};
        };

        init();

        vm.saveItem = function () {

            if (!vm.item._id) {
                vm.item.user = { _id: userLogged._id, name: userLogged.name };
                CoreItemService.saveItem(vm.item).then(function (data) {
                    if (data === 'server undefined') {
                        $scope.closeThisDialog();
                        $state.go('server-undefined');
                        return;
                    }
                    $scope.closeThisDialog(data);
                });
                return;
            }

            if (angular.equals($scope.ngDialogData.item, vm.item)) {
                $scope.closeThisDialog('Registro atualizado com sucesso.');
            }

            CoreItemService.updateItem(vm.item).then(function (data) {
                if (data === 'server undefined') {
                    $scope.closeThisDialog();
                    $state.go('server-undefined');
                    return;
                }
                $scope.closeThisDialog({ message: data, item: vm.item });
            });
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.login', []).config(loginConfig);

    loginConfig.$inject = ['$stateProvider'];
    function loginConfig($stateProvider) {
        $stateProvider.state('login', {
            url: '/login',
            views: {
                'body': {
                    templateUrl: 'modules/login/login.html',
                    controller: 'loginController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.login').controller('loginController', loginController);

    loginController.$inject = ['$http', 'CoreLoginService', 'CoreAuthService', 'CoreUserService', '$state', 'REGEX'];

    function loginController($http, CoreLoginService, CoreAuthService, CoreUserService, $state, REGEX) {
        //vars
        var vm = this;
        vm.login = { email: '', password: '' };
        vm.msgError = '';
        vm.validateEmail = REGEX.validateEmail;

        //functions to view
        vm.signIn = function () {
            CoreLoginService.login(vm.login).then(function (data) {
                if (data === 'server undefined') {
                    $state.go('server-undefined');
                    return;
                }

                if (data.message) {
                    vm.msgError = data.message;
                    return;
                }
                $state.go('home');
            }).catch(function (error) {
                console.log(error);
            });
        };
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.login').service('loginService', loginService);

    loginService.$inject = [];

    function loginService() {}
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.settings', []).config(settingsConfig);

    settingsConfig.$inject = ['$stateProvider'];
    function settingsConfig($stateProvider) {
        $stateProvider.state('settings', {
            url: '/settings',
            views: {
                'menu': {
                    template: '<menu></menu>'
                },
                'body': {
                    templateUrl: 'modules/settings/settings.html',
                    controller: 'settingsController',
                    controllerAs: 'vm'
                }
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.settings').controller('settingsController', settingsController);

    settingsController.$inject = ['DataFactory', '$state', 'ngDialog', 'CoreAuthService', 'DialogFactory'];

    function settingsController(DataFactory, $state, ngDialog, CoreAuthService, DialogFactory) {
        //vars
        var vm = this;
        vm.data = DataFactory;

        var init = function init() {
            vm.data.menuItemActive = 'settings';
        };

        init();

        vm.changePassword = function () {
            var changePassword = ngDialog.open({
                templateUrl: 'modules/settings/partials/changePassword/changePassword.html',
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false,
                controller: 'changePasswordController',
                controllerAs: 'vm'
            });

            changePassword.closePromise.then(function (data) {
                if (!data.value) return;
                DialogFactory.openDialog(data.value);
            });
        };

        vm.logout = function () {
            CoreAuthService.removeToken();
            $state.go('login');
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.user', []).config(userConfig);

    userConfig.$inject = ['$stateProvider'];
    function userConfig($stateProvider) {
        $stateProvider.state('user', {
            url: '/user',
            views: {
                'menu': {
                    template: '<menu></menu>'
                },
                'body': {
                    templateUrl: 'modules/user/user.html',
                    controller: 'userController',
                    controllerAs: 'vm'
                }
            },
            role: 'admin'
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.user').controller('userController', userController);

    userController.$inject = ['CoreUserService', 'ngDialog', 'DataFactory', 'DialogFactory', 'CoreAuthService', '$state'];

    function userController(CoreUserService, ngDialog, DataFactory, DialogFactory, CoreAuthService, $state) {
        //vars
        var vm = this;
        vm.data = DataFactory;
        var userLogged = CoreAuthService.getTokenData();
        vm.listUsers = [];
        vm.filterUser = { name: '', role: '' };
        var init = function init() {
            vm.data.menuItemActive = 'user';
            CoreUserService.getListUser(vm.filterUser).then(function (data) {
                if (data === 'server undefined') {
                    $state.go('server-undefined');
                    return;
                }
                vm.listUsers = data;
            });
        };

        init();

        vm.newUser = function () {
            var newUser = ngDialog.open({
                templateUrl: 'modules/user/userModal.html',
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false,
                controller: 'userModelController',
                controllerAs: 'vm'
            });

            newUser.closePromise.then(function (data) {
                if (!data.value) return;
                DialogFactory.openDialog(data.value.message);
                vm.listUsers.push(data.value.user);
            });
        };

        vm.editUser = function (user) {
            var editUser = ngDialog.open({
                templateUrl: 'modules/user/userModal.html',
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false,
                controller: 'userModelController',
                controllerAs: 'vm',
                data: {
                    user: user
                }
            });

            editUser.closePromise.then(function (data) {
                if (!data.value) return;

                if (typeof data.value === 'string') {
                    DialogFactory.openDialog(data.value);
                    return;
                }
                DialogFactory.openDialog(data.value.message);
                var count = 0;
                vm.listUsers.find(function (userEdited) {
                    count++;return userEdited._id === data.value.user._id;
                });
                vm.listUsers.splice(count - 1, 1, data.value.user);
            });
        };

        vm.deleteUser = function (user) {
            if (userLogged._id === user._id) {
                DialogFactory.openDialog('O usuário logado não pode deletar ele mesmo.');
                return;
            }
            DialogFactory.openDialogConfirm('Deseja deletar ' + user.name + ' ?').then(function (data) {
                if (data) {
                    CoreUserService.deleteUser(user._id).then(function (data) {
                        if (data === 'server undefined') {
                            $state.go('server-undefined');
                            return;
                        }
                        DialogFactory.openDialog(data.message);
                        var count = 0;
                        vm.listUsers.find(function (userDeleted) {
                            count++;return userDeleted._id === user._id;
                        });
                        vm.listUsers.splice(count - 1, 1);
                    });
                }
            });
        };

        vm.search = function () {
            CoreUserService.getListUser(vm.filterUser).then(function (data) {
                if (data === 'server undefined') {
                    $state.go('server-undefined');
                    return;
                }
                vm.listUsers = data;
            });
        };
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.user').service('userService', userService);

    userService.$inject = [];

    function userService() {}
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.user').controller('userModelController', userModelController);

    userModelController.$inject = ['CoreUserService', 'CoreAuthService', '$scope', 'DialogFactory', 'REGEX', '$state'];

    function userModelController(CoreUserService, CoreAuthService, $scope, DialogFactory, REGEX, $state) {
        //vars
        var vm = this;
        var userLogged = CoreAuthService.getTokenData();
        vm.validateEmail = REGEX.validateEmail;
        var init = function init() {
            vm.user = $scope.ngDialogData ? angular.copy($scope.ngDialogData.user) : {};
        };

        init();
        vm.saveUser = function () {

            if (!vm.user._id) {
                CoreUserService.saveUser(vm.user).then(function (data) {
                    if (data === 'server undefined') {
                        $scope.closeThisDialog();
                        $state.go('server-undefined');
                        return;
                    }
                    if (typeof data === 'string') {
                        DialogFactory.openDialog(data);
                        return;
                    }
                    $scope.closeThisDialog(data);
                });
                return;
            }

            if (vm.user._id == userLogged._id && vm.user.role != userLogged.role) {
                DialogFactory.openDialog('O usuário logado não pode mudar o nível de acesso do mesmo.');
                return;
            }

            if (angular.equals($scope.ngDialogData.user, vm.user)) {
                $scope.closeThisDialog('Registro atualizado com sucesso.');
            }

            CoreUserService.updateUser(vm.user).then(function (data) {
                if (data === 'server undefined') {
                    $scope.closeThisDialog();
                    $state.go('server-undefined');
                    return;
                }
                $scope.closeThisDialog({ message: data.message, user: vm.user });
            });
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.error').config(accessDeniedConfig);

    accessDeniedConfig.$inject = ['$stateProvider'];
    function accessDeniedConfig($stateProvider) {
        $stateProvider.state('access-denied', {
            url: '/access-denied',
            views: {
                'menu': {
                    template: '<menu></menu>'
                },
                'body': {
                    templateUrl: 'modules/error/access-denied/access-denied.html',
                    controller: 'accessDeniedController',
                    controllerAs: 'vm'
                }
            },
            params: {
                route: null
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.error').controller('accessDeniedController', accessDeniedController);

    accessDeniedController.$inject = ['$stateParams', 'DataFactory'];

    function accessDeniedController($stateParams, DataFactory) {
        //vars
        var vm = this;
        vm.data = DataFactory;

        var init = function init() {
            vm.data.menuItemActive = $stateParams.route;
        };

        init();
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel.error').config(serverUndefinedConfig);

    serverUndefinedConfig.$inject = ['$stateProvider'];
    function serverUndefinedConfig($stateProvider) {
        $stateProvider.state('server-undefined', {
            url: '/server-undefined',
            views: {
                'menu': {
                    template: '<menu"></menu>'
                },
                'body': {
                    templateUrl: 'modules/error/server-undefined/server-undefined.html',
                    controller: 'serverUndefinedController',
                    controllerAs: 'vm'
                }
            },
            error: true
        });
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.error').controller('serverUndefinedController', serverUndefinedController);

    serverUndefinedController.$inject = ['CoreStatusService', '$state'];

    function serverUndefinedController(CoreStatusService, $state) {
        //vars
        var vm = this;
        var verify = setInterval(function () {
            CoreStatusService.statusServer().then(function (data) {
                if (data === 'Server OK') {
                    clearInterval(verify);
                    $state.go('home');
                }
            });
        }, 5000);
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel.settings').controller('changePasswordController', changePasswordController);

    changePasswordController.$inject = ['CoreUserService', 'CoreAuthService', '$scope', 'DialogFactory', '$state'];

    function changePasswordController(CoreUserService, CoreAuthService, $scope, DialogFactory, $state) {
        //vars
        var vm = this;
        vm.passwords = { password: '', newPassword: '', email: CoreAuthService.getTokenData().email };
        vm.repeatPassword = '';
        vm.changePassword = function () {
            if (vm.passwords.newPassword !== vm.repeatPassword) {
                DialogFactory.openDialog('Nova senha incorreta.');
                return;
            }
            if (vm.passwords.password === vm.passwords.newPassword) {
                DialogFactory.openDialog('A nova senha não pode ser igual a atual.');
                return;
            }
            CoreUserService.changePassword(vm.passwords).then(function (data) {
                if (data === 'server undefined') {
                    $scope.closeThisDialog();
                    $state.go('server-undefined');
                    return;
                }
                if (data.message) {
                    DialogFactory.openDialog(data.message);
                    return;
                }
                $scope.closeThisDialog(data);
            });
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('controlpanel').component('menu', {
        bindings: {},
        templateUrl: 'components/menu/menu.html',
        controller: menuController,
        controllerAs: 'vm'
    });

    menuController.$inject = ['$scope', '$window', '$state', 'DataFactory'];

    function menuController($scope, $window, $state, DataFactory) {
        var vm = this;
        vm.compress = false;
        vm.data = DataFactory;

        vm.menuCompress = function () {
            vm.compress = !vm.compress;
        };

        vm.changeScreen = function (screen) {
            return $state.go(screen);
        };

        angular.element($window).bind('resize', function () {
            console.log($window.innerWidth);
            if ($window.innerWidth <= 767 && vm.compress) {
                vm.compress = false;
                $scope.$apply();
            }
        });
    }
})();
'use strict';

(function () {

    'use strict';

    var staticRoot = 'http://127.0.0.1:3131/api/';
    angular.module('controlpanel').constant('CONST', {
        getLivros: staticRoot,
        getCupom: staticRoot.concat('getCupom')
    }).constant('REGEX', {
        validateEmail: /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i
    });
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').factory('DialogFactory', DialogFactory);

    DialogFactory.$inject = ['ngDialog', '$q'];

    function DialogFactory(ngDialog, $q) {

        var openDialog = function openDialog(mensagem) {
            return ngDialog.open({
                template: mensagem,
                plain: true,
                className: 'ngdialog-theme-default',
                closeByDocument: true,
                closeByEscape: true,
                showClose: false
            });
        };

        var openDialogConfirm = function openDialogConfirm(mensagem) {
            var defer = $q.defer();
            ngDialog.openConfirm({
                template: "<div class='msg-dialog'> <div><span> " + mensagem + "</span></div> <div class='msg-buttons'> <button class='btn btn-red btn-md' ng-click='closeThisDialog(0)'> Cancelar </button> <button class='btn btn-green btn-md' ng-click='confirm(1)'> OK </button> </div></div>",
                plain: true,
                className: 'ngdialog-theme-default',
                closeByDocument: false,
                closeByEscape: false,
                showClose: false
            }).then(function (value) {
                defer.resolve(value);
            }, function (value) {
                defer.resolve(value);
            });

            return defer.promise;
        };

        return {
            openDialog: openDialog,
            openDialogConfirm: openDialogConfirm
        };
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').service('HTTPSERVICE', HTTPSERVICE);

    HTTPSERVICE.$inject = ['$http', '$q'];

    function HTTPSERVICE($http, $q) {
        var vm = this;

        vm.get = function (url) {
            return $http.get(url).then(function (data) {
                return data.data;
            }, function (err) {
                return err;
            });
        };

        vm.post = function (url, params) {
            return $http.post(url, params).then(function (data) {
                return data.data;
            }, function (err) {
                return err;
            });
        };

        vm.delete = function (url) {
            return $http.delete(url).then(function (data) {
                return data.data;
            }, function (err) {
                return err;
            });
        };

        vm.put = function (url) {
            return $http.delete(url).then(function (data) {
                return data.data;
            }, function (err) {
                return err;
            });
        };
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('controlpanel').directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter, { 'event': event });
                    });
                    event.preventDefault();
                }
            });
        };
    });
})();